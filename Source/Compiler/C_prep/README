

                    C_PREP - Documentation Version 1.5


                            by Jim McDowell
                          JML SOFTWARE DESIGN
 

C_PREP is an ANSI standard C preprocessor.  It can completely replace
Microware's c.prep.  It contains all of the features of c.prep plus some
extras.  It follows the grammar set out in the ANSI C standard by the X3J11
committee.

Version 1.5 runs 1.4 times the speed of c.prep.  This should be an acceptable
speed tradeoff for the extra flexability that C_PREP offers.  Preprocessing
is a small part of the compiling process.  C_PREP took 55 seconds to process
a 16K source file.  C.PREP took 38 seconds.

If your program uses complex #define macros you may get a STACK OVERFLOW
error.  If this happens just specify extra memory on the command line (#32k).
I STILL WOULD APPRECIATE INPUT ON HOW THIS PROGRAM OPERATES.  IF THERE ARE
ANY BUGS PLEASE REPORT THEM TO ME SO I CAN FIX THEM.

                      ***************************
                      ****  C_PREP COMMANDS  ****
                      ***************************

Version 1.5 supports the following preprocessor commands:
(Braces {} enclose required information, Brackets [] optional information.)

    #define {identifier} {token sequence}
    #define {identifier}( {identifier-list} ) {token sequence}
    #undef {identifier}
    #include < {filename} >
    #include " {filename} "
    #include {token-sequence}
    #if {constant-expression}
    #ifdef {identifier}
    #ifndef {identifier}
    #elif {constant-expression}
    #else
    #endif
    #error {token-sequence}
    #line {constant} [" {filename} "]
    #line {token-sequence}
    #pragma {token-sequence}
    #
    defined [(] {identifier} [)]

Version 1.5 also supports the predefined names:

    __LINE__                   (Returns current line number)
    __FILE__                   (Returns current file name)
    __DATE__                   (Returns compile date: Mmm dd yyyy)
    __TIME__                   (Returns compile time: hh:mm:ss)
    __STDC__                   (Returns 1 to indicate ANSI compatibility)

This version also has the following ANSI compatible features:

  * Optional trigraph expansion (engaged with -t switch)
  * Concatenation of any line ending with a \ and newline character
  * Lines are split into tokens separated by spaces
  * Each comment is replaced by a single space
  * Handles macro usage of # (places " around following argument)
  * Handles macro usage of ## (concatenates preceding and following tokens)
  * Concatenates adjactent string literals

The following features are included also:

  * When c_prep is run as a filter the root source file is given a default
    name of "stdin.c"
  * In the ANSI (-c) mode, instead of #asm and #endasm the following
    pragma will be generated:   #pragma asm <assembly code>
  * Microware c.prep emulation:
      - supports Microware's oddball line codes (default)
      - supports -e switch to set edition number
      - supports -l switch to copy source code to the compiler for including
        comments in the assembly language output.
      - allows #asm and #endasm to include assembly code in the C source
  * The e and l switches generate the following pragma commands:
                #pragma edn <edition #>
                #pragma src <C source line>
  * Error handling.  The filename and line number are returned.  The line
    number counts from 0-... (compatible with sled).  The source line is
    reprinted to aid in debugging.  Sometimes the source line printed will
    not be the same as in the source file.  This is because the preprocessor
    alters the line as it goes.  So when an error is encountered the line
    printed with the error code may reflect preprocessor changes.

Version 1.5 has the following limitations:

  * Maximum line length is 250 characters.  This is less than the ANSI
    recommendation but cuts in half the needed memory.  It should suit
    most programmer's needs, but can be changed by changing the variable
    LINEMAX in cp.h and then recompiling.
  * Maximum memory allocated for definition data is 5000 bytes.  This
    can be changed by STRNG_TBL_MAX in cp.h.
  * Maximum number of arguments allowed in a macro (#define) is 4.  The
    maximum length of each argument is 120 characters.  This is less than
    the ANSI recommmendation but should suit most needs.  These limits can
    be adjusted by changing MAX_ARGS and MAX_LENGTH in cp.h.
  * Maximum number of nested #if statements is 8.  This is the ANSI
    standard.  It can be changed by MAX_NEST_IF in cp.h.
  * Maximum number of nested #include statements is 8 levels beyond the
    root file.  This can be changed by MAX_INCLUDE in cp.h.
  * Maximum number of definitions allowed is 300.  This can be changed by
    MAX_DEFS in cp.h.
  * #include <> statements look for files in /DD/DEFS directory.
  * The #pragma asm command (only for full ANSI operation) requires an *
    if there is no label in the command.  For example:
    #pragma asm LOOP lda #20                (with label)
    #pragma asm *lda #20                    (without label)
    The need for the * is to preserve the mnemonic column properly.  It's a
    bit of a pain but shouldn't be a problem until a full ANSI compiler is
    available.  Then I will try to simplify it.

Version 1.5 has the following limitations:



C_PREP's usage syntax is as follows:

    c_prep [<-opt1> <-opt2> <...>] [<filename>] [<-opt1> <-opt2> <...>]

The program outputs to the standard output path.  It can be run as a filter:

    list file.c ! c_prep
    list test.c ! c_prep >test.prep

or it can read the input file from the command line:

    c_prep file.c

other options include:

    c_prep -h  (will produce help screen)
    c_prep -t test.c   (will perform trigraph substitution step)
    c_prep -dMAIN test.c   (will define MAIN as 1 before preprocessing)
    c_prep -dTWO=1+1 test.c   (will define TWO as 1+1 before preprocessing)
    c_prep file.c -c   (process file with ANSI line codes)
    c_prep -c file.c -e=5   (process with ANSI line codes & set edition
                            equal to 5)
    c_prep -c file.c -l   (process with ANSI line codes & copy source lines to 
                          output for inclusion in the assembly listing)

The file krtest.c contains the example preprocessor commands given in the
K&R book.
 



                           *********************
                         ***                   ***
                      ******  COMMAND SUMMARY  ******
                         ***                   ***
                           *********************

All preprocessor commands are prefixed with a # character.  C_PREP allows
the # to be preceded and followed by whitespace characters.  Thus the
following is valid:

                #       ifdef       MAIN
 
The following is a detailed description of the new preprocessor commands
found in C_PREP Version 1.5:
(Braces {} enclose required information, Brackets [] optional information.)

#define {identifier}( {identifier-list} ) {token sequence}

        Example: #define dprint(expr) printf(#expr " = %g\n",expr)
                 dprint(x/y);

        Result:  printf("x/y" " = %g\n",x/y);

        Notice the phrase #expr in the definition.  This tells the
        preprocessor to place quotation marks (") around expr.
        In actual processing the two string literals in the result would
        be concatenated.

        Example: #define paste(front,back) front ## back
                 paste(get,char());

        Result : getchar();

        This absurd example shows the function of the ## operator.  It
        concatenates the preceding and following token.

#undef {identifier}

        Example: #undef SYS

        Result : If SYS has been defined its definition is erased, otherwise
                 the commands is ignored.

        This is the ONLY allowable way to change a defined value.  It must be
        undefined and then redefined with a new value.

#include < {filename} >

        This command searches the LIB directory on the default drive for
        the inclusion file.

#include " {filename} "

        This command searches the current data directory for the inclusion
        file.

#include {token-sequence}

        Example: #define CTYP <ctype.h>
                 #include CTYP

        This command after macro expansion must be in one of the above two
        forms.

#if {constant-expression}
#elif {constant-expression}

        Example: #if SYS==1
                     puts("SYS=1");
                 #elif SYS==2
                     puts("SYS=2");
                 #endif

        This command evaluates the constant-expression if it is TRUE then
        the following lines are processed until an #elif (else-if), #else,
        or #endif is encountered.  The constant-expression must always
        evaluate to TRUE (non-zero) or FALSE (zero).

        The constant-expression may contain any unsigned integer or token-
        sequence that macro expands into an unsigned integer.  Parentheses
        are allowed and the following operators are allowed:

        Unary operators:
            ! ~ + -

        Binary operators:
            * / % + - << >> < <= > >= == != & ^ | && ||

#error {token-sequence}

        Example: #error File Error!

        Result : User error ... File Error!

        This command can be used to flag portions of your program.  It will
        not stop the preprocessor but will write the warning message to the
        standard error output path.

#line {constant} [" {filename} "]

        Example: #line 0 "stdin.c"

        This command is supplied by the preprocessor to allow the compiler
        to remember the original source line numbers.
        If running C_PREP in Microware emulation mode the Microware format
        of this command will be used instead.
        You can use this command to override the compiler settings.

#line {token-sequence}

        Example: #define LINE 256
                 #define FILE "myname.c"
                 #line LINE FILE

        This is a variation on the above command.  In this instance the
        arguments are expanded to produce a #line command of the format
        previously shown.  This form is never produced by the compiler.
        It is only for the programmer's convenience.

#pragma {token-sequence}

        Example: #pragma asm <assembly code>
                 #pragma edn <edition number>
                 #pragma src <source code>

        The pragma commands is designed to allow implementation defined
        commands.

        ASM replaces the Microware #asm/#endasm commands.  Just prefix each
        assembly code line with "#pragma asm".
 
        EDN and SRC are generated by CPREP automatically.  EDN is controlled
        by the -e switch.  SRC is controlled by the -l switch.

#
        Example: #

        This is the NULL directive.  It is ignored by the preprocessor.

defined [(] {identifier} [)]

        Example: #if defined(SYS)
                 #if !defined SYS

        The defined command tests the identifier to see if it has been
        defined.  If it has it returns TRUE, otherwise FALSE.  Parentheses
        are optional.  In the second example the test returns TRUE if SYS
        is not defined.

__LINE__

        Example: printf("Current line number = %d\n",__LINE__);

        Result : Current line number = 450

        This is a decimal constant containing the current line number.

__FILE__

        Example: printf("Current file name is: %s\n",__FILE__);

        Result : Current file name is: solve.c

        This is a string literal containing the name of the file being
        compiled.

__DATE__

        Example: printf("Compile date is: %s\n",__DATE__);

        Result : Compile date is: Jan 25 1993

        This is a string literal containing the date of compilation.  It is
        in the form: Mmm dd yyy

__TIME__

        Example: printf("Compile time: %s\n",__TIME__);

        Result : Compile time: 12:59:59

        This is a string literal containing the time of compilation.  It is
        in the form of: hh:mm:ss

__STDC__                   (Returns 1 to indicate ANSI compatibility)

        Example: #if __STDC__ == 1
                     puts("This is an ANSI preprocessor");
                 #else
                     puts("This is not ANSI!!");

        This is a constant 1.  This indicates that C_PREP is an ANSI
        conforming preprocessor.






